Class and Instance Methods
  * File::path and File#path difference
    - File::path is a class method 
    - File#path is an instance method 
      => Class methods are called on the class, while instance methods are called on objects
      => for example
        puts File.path('bin')
        -> calls the class method File::path since we're calling it on the File class
        f = File.new('my-file.txt')
        puts f.path
        -> calls the instance method File#path since we're calling it on an object of the File class, namely f
Optional Arguments Redux
  Date::new signature: new([year=-4712[, month=1[, mday=1[, start=Date::ITALY]]]]) â†’ date
  * Examples:
    Date.new                           # everything defaults
    Date.new(2016)                     # month, mday, start use defaults
    Date.new(2016, 5)                  # mday, start use defaults
    Date.new(2016, 5, 13)              # start uses default
    Date.new(2016, 5, 13, Date::ITALY) # nothing defaults
Default Arguments in the Middle
  * Three types of arguments
    1. positional arguments
      -> my_method(argument1, argument2)
      * default positional arguments
        - when the method defines default arguments you do not need to supply all the arguments to the method. Ruby will fill in the missing arguments in-order
        - Ruby fills in the missing arguments from left to right
        - Ruby allows default values to appear in the middle of positional arguments
          =>def my_method(a, b = 2, c = 3, d)
              p [a, b ,c, d]
            end
            my method(1, 4) => [1, 2, 3 ,4]
            my_method(1, 5, 6) => [1, 5, 3, 6]
    2. keyword(or named) arguments
      -> my_method(position11, keyowrd1: value1, keyword2: value2)
    3. block argument
      ->my_method do
          # ...
        end
      ->my_method {
          #...
        }
      ->my_method do |argument1, argument2|
          # ...
        end
      * Block Local Arguments
        - Assigning to a block-local argument will not override local arguments outside the block in the caller's scope
  - All arguments in ruby are passed by reference and are not lazily evaluated.
  - Each argument is separated by a ,
Mandatory Blocks
  =>a = [1, 4, 8, 11, 15, 19]
    a.bsearch { |value| value > 8 }
  ->block must return true or false when operating in what is called "fine-minimun mode", which is the usual case.
Multiple Signatures
  a = %w(a b c d e)
  puts a.fetch(7) =>IndexError index outside of array bounds: -5...5
  puts a.fetch(7, 'beats me') => beats me
  puts a.fetch(7) { |index| index**2 } => 49
  * fetch(index) -> obj 
  * fetch(index, default) -> obj 
  * fetch(index){|index| block} -> obj
  - #fetch can be called with an index argument, an index and a default argument, or an index argument and a block
  - both default and the block are optional arguments, but they can't be used together
Keyword Arguments
  * Numeric#step: 
    - step(by:step,to:limit){|i| block} -> self
    - step(by:step,to:limit) -> an_enumerator
    - step(limit=nil,step=1){|i| block} -> self
    - step(limit=nil,step=1) -> an_enumerator
  Invokes the given block with the sequence of numbers starting at num, incremented by step (defaulted to 1) on each call.
  The loop finishes when the value to be passed to the block is greater than limit (if step is positive) or less than limit (if step is negative), where limit is defaulted to infinity.
  5.step(to: 10, by: 3) { |value| puts value } => 5, 8
  ->#step takes two keyword arguments(also called named arguments), :by and :to (keyword argument names are symbols)

  