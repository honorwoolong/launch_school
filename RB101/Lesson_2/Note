Lesson_2
kick off
  - Goal: 
    1. build fluency in language syntax
    2. learn to think like a programmer
    3. learn to build application
    4. debugging mindset
  - 3 main buckets:
    1. learn to program procedurally
    2. OOP(Object-Oriented Programming)
    3. other stuff: testing, blocks, tools, problem solving, developing familiarity with the language
  - Learning to code vs learning to program
    1. Ruby grammer & syntax just like English grammer & vocabulary
    2. Building application just like writing essays and novels
    3. very frustrating to jump between the two(English & Program language)
    4. pseudo code(Use English plain to write and list down all possibilities logically before running every code)
  - Looking for help
    1. Search(google) using the "right phrases" by use the stack trace, reading error messages and adding "ruby"
    2. Stack Overflow
    3. Ruby Docs(Not Rails Docs)
  - Asking for help
    1. treat us like coworkers
    2. push everything to github
    3. forums
    4. chatrooms
    5. TA office hours
  - We're learning: Application Development
    1. lots of different types of Programming
    2. Ruby is the syntax, good for all kinds of Programming

A Note on Style
  Parentheses
    - Optional when you invoke a method
    - To be more clear thile you're getting adjusted to reading Ruby, will always use paretheses whrn invoking a method in this lesson
    - Example: gets().chomp() instead of gets.chomp
  puts and gets
    - display something: puts; ask the user for some input: gets
    - We are going to call those methods with their module, like Kernel.puts() or Kernel.gets()
    - It's important to understand that all methods come from somewhere

Truthiness
  - "true" or "false" build conditional logic and understand the state of an object or expression
  - boolean data type, boolean is an object whose only purpose is to convey whether it is "true" or "false"s
      true.class          # => TrueClass
      true.nil?           # => false
      true.to_s           # => "true"
      true.methods        # => list of methods you can call on the true object
      #Same as "false"
  - Logical Operators
    1. &&: "and" operator, return true only if both expressions being evaluated are true
      #num > 10 && num.odd? => false if num = 5, Ruby didn't get confused and thought you were trying to do this: num > (10 && num.odd?).
      #Ruby's order of operator precedence considers > as higher precedence than &&
      #You can chain as many expressions as you'd like with &&
    2. ||: "or" operator, return if either one of evaluated object is true which is less strict than the && operator
    3. Short Circuiting: the && and || operators exhibit a behavior that it will stop evaluating expressions once it can guarantee the return value
      #false && 3/0 => false, no generate a ZeroDivisionError because the && operator didn't even evaluate the second expression
      #since the first expression is false, it can short circuit and return false(Note that it will get an error by false || 3/0 => ZeroDivisionError)
  Truthiness
    - Ruby is a very liberal language and considers everything to be truthy other than false and nil.
    - Any expression in a conditional, or with logical operators, and as long as it doesn't evaluate to false or nil, it is considered true. 
        num = 5

        if num
          puts "valid number"
        else
          puts "error!"
        end

        #=> valid number
    -  Everything in Ruby is considered "truthy" except for false and nil.

Walk-through: Calculator
  - My solution
    puts "Give 1st number!"
    num_1 = gets.chomp
    puts "Give 2nd number!"
    num_2 = gets.chomp
    puts "Do you want to add, substract, multiply or divide?"
    op = gets.chomp

    case op
    when "add"
      puts num_1.to_i + num_2.to_i
    when "substract"
      puts num_1.to_i - num_2.to_i
    when "multiply"
      puts num_1.to_i * num_2.to_i
    when "divide"
      puts num_1.to_f / num_2.to_f
    end

Pseudo-Code
  - is meant for humans to read so no rigid format to follow because human brains are far more flexible and powerful than programming language interpreters or compliers
  - Two layers to solving any problems(frustrating to newbie so this is where pseudo-code comes into play)
    1. The logical problem domain layers
    2. The syntactical programming language layer
  Formal Pseudo-Code and Translating Pseudo-Code to Program Code 
    - Before we can take our pseudo-code and translate it to program code, we need to first formalize the pseudo-code
    - Use below keyword to assist us
        START:           start of the program
        SET:             sets a variable we can use for later
        GET:             retrieve input from user
        PRINT:           displays output to user
        READ:            retrieve value from variable
        IF/ELSE IF/ELSE: show conditional branches in logic
        WHILE:           show looping logic
        END:             end of the program
    - example about how pseudo-code apply
      Given a collection of integers.

      Iterate through the collection one by one.
        - save the first value as the starting value.
        - for each iteration, compare the saved value with the current value.
        - if the saved value is greater, or it's the same
          - move to the next value in the collection
        - otherwise, if the current value is greater
          - reassign the saved value as the current value

      After iterating through the collection, return the saved value.

    - pseudo-code
      START

      # Given a collection of integers called "number"

      SET iterator = 1
      SET saved_number = value within numbers collection at space 1

      WHILE iterator <= length of numbers
        SET current_number = value within numbers collection at space "iterator"
        IF saved_number >= current_number
          go to the next iteration
        ELSE
          saved_number = current_number

        iterator = iterator + 1

      PRINT saved_number

      END

    - program code
      def find_greatest(numbers)
        saved_number = nil

        numbers.each do |num|
          saved_number ||= num #assign to first value
          if saved_number >= num
            next
          else
            saved_number = num
          end
        end

        saved_number
      end
  - For more sophisticated problems, we need to take a piecemeal approach to applying pseudo-code, then translating that to Ruby code to verify the logic is correct, then moving on to the next piece in the problem.
  - example to write out pseudo-code(both casual and formal)
    1. a method that returns the sum of two integers
    #casual
      - there are two values "number1" and "number2" which are both integers
      - Make number1 adding number2 become a new number "sum"
      - display the new number "sum"
    #formal
      START

      SET number1 = integer
      SET number2 = integer
      SET sum = number1 + number2
      PRINT sum

      END
    2. a method that takes an array of strings, and returns a string that is all those strings concatenated together
    #casual
      - there are several strings list in an array
      - concatenated each array together to be a new sentence which is a string
      - display new sentence
    #formal
      START

      SET array = ["strings"]
      SET sentence = concatenated array to be one string
      PRINT sentence

      END
    3. a method that takes an array of integers, and returns a new array with every other element
    #casual
      - there are integers in an array
      - adding other values into it to become a new array
      - display new array
    #formal
      START

      SET array = [intergers]
      SET new_array = put other values into array
      PRINT new_array

      END

Flowchart
  - Using a flowchart helps us out the logical sequence of a possible solution in a visual way.
  - refer to website for the diagram of flowchart
  - This helps us map out the step-by-step logic, which is called the imperative or procedural way to solve a problem.
  - A Larger Problem(when pseudo-code gets long, it becomes very hard to trust the accuracy of the logic)
    - high level pseudo-code
      while user wants to keep going
        - ask the user for a collection of numbers
        - extract the largest one from that collection and save it #it contains a lot logic in this line
        - ask the user if they want to input another collection
      return saved list of numbers
    - full pseudo-code
        while user wants to keep going
        - ask the user for a collection of numbers
        - iterate through the collection one by one.
          - save the first value as the starting value
          - for each iteration, compare the saved value with the current value
          - if the saved value is greater, or it's the same
            - move to the next value in the collection
          - otherwise, if the current value is greater
            - reassign the saved value as the current value

        - after iterating through the collection, save the largest value into the list
        - ask the user if they want to input another collection

      return saved list of numbers
    - formal pseudo-code
      START

      SET large_numbers = []
      SET keep_going = true

      WHILE keep_going == true
        GET "enter a collection"
        SET collection
        SET largest_number = SUBPROCESS "extract the largest one from that collection"
        large_number.push(largest_number)
        GET "enter another collection?"
        IF "yes"
          keep_going = true
        ELSE
          keep_going = false
        IF keep_going == false
          exit the looping

      PRINT large_numbers

      END

    - example of Calculator
      # high level using declarative syntax
        - Get the first number
          - Make sure it's valid, otherwise, ask for another
        - Get the second number
          - Make sure it's valid, otherwise, ask for another
        - Get the operator
          - Make sure it's valid, otherwise, ask again

        - Perform operation on the two numbers
        - Display result
        - Ask if user wants to do another calculation

Rubocop
  - a static code analyzer which analyze and offer advice about its style format as well as possible logical errors
  - In Rubocop parlance, these rules are called cops. Cops are further grouped into departments.
    1. Style Format(1st department)
      - Coding style is a matter of opinion, Rubyists have settled on a set of conventions refer to a document called the Ruby Style Guide
      - For example, if your code isn't indented with 2 spaces, the IndentationWidth cop will complain.
    2. Code Linting
      - a program that inserts your code for possible logical errors or code smells
      - For example, if your code instantiates an unused local variable, the UselessAssignment cop will complain.
  - Installation and Usage 
    - rubocop -v => version 0.46.0 
    - rubocop test.rb => run rubocop on test.rb file 
  - Quick Tutorial
    - C (convention), W (warning), E (error), and F (fatal error)
    - file name:the line number:the column number, for example => test.rb:6:5: C: ...
    - rubocop test.rb --format offenses => to find out which cop(department) complained
  - Configuring Robocop
    - how to ignore some of particular rules due to overly strict
    - through a configuration file called .robocop.yml

Walk-through: Refactoring Calculator
  - My refactoring Calculator
    def prompt(str)
      puts "=> #{str}"
    end

    def valid_number?(num)
      num.to_i != 0
    end

    def op_print(op)
      case op
      when "1"
        "Adding"
      when "2"
        "Substracting"
      when "3"
        "Multiplying"
      when "4"
        "Dividing"
      end
    end

    prompt("Welcome to Woolong Calculator!")

      name = nil
      loop do 
        prompt("What's your name?")
        name = gets.chomp
        if name.empty?
          prompt("Hmm...please provide it...")
        else
          break
        end
      end

      prompt("Hi! #{name}!!")

    loop do 

      num_1 = nil
      loop do 
        prompt("Give 1st number!")
        num_1 = gets.chomp
        if valid_number?(num_1)
          break
        else
          prompt("It's not a valid number!")
        end
      end

      num_2 = nil
      loop do 
        prompt("Give 2nd number!")
        num_2 = gets.chomp
        if valid_number?(num_2)
          break
        else
          prompt("It's not a valid number!")
        end
      end

      op = nil
      operator_prompt = <<-MSG
      Do you want to add, substract, multiply or divide?
          1) Add
          2) Substract
          3) Multiply
          4) Divide
      MSG

      loop do 
        prompt(operator_prompt)
        op = gets.chomp
        if %w(1 2 3 4).include?(op)
          break
        else
          promp("Please check your option of operator!")
        end
      end

      result =  case op
                when "1"
                  num_1.to_i + num_2.to_i
                when "2"
                  num_1.to_i - num_2.to_i
                when "3"
                  num_1.to_i * num_2.to_i
                when "4"
                  num_1.to_f / num_2.to_f
                end

      prompt("#{op_print(op)} the two numbers...")
      prompt("The result is #{result}!!")
      
      prompt("Do you want to continue?(Y to continue calculating)")
      answer = gets.chomp
      if answer.downcase.start_with?('y')
        prompt("Let's keep going!")
      else
        break
      end
    end

    prompt("Goodbye! My Love!")

Rubocop Calculator
  - After Rubocop fine tuning
    def prompt(string)
      puts "=> #{string}"
    end

    def valid_number?(num)
      num.to_i != 0
    end

    def op_print(op)
      case op
      when '1'
        'Adding'
      when '2'
        'Substracting'
      when '3'
        'Multiplying'
      when '4'
        'Dividing'
      end
    end

    prompt('Welcome to Woolong Calculator!')

    name = ''

    loop do
      prompt('What\'s your name?')
      name = gets.chomp
      break unless name.empty?
      prompt('Hmm...please provide it...')
    end

    prompt("Hi! #{name}!!")

    loop do
      num1 = ''
      loop do
        prompt('Give 1st number!')
        num1 = gets.chomp
        break if valid_number?(num1)
        prompt('It\'s not a valid number!')
      end

      num2 = ''
      loop do
        prompt('Give 2nd number!')
        num2 = gets.chomp
        break if valid_number?(num2)
        prompt('It\'s not a valid number!')
      end

      op = ''
      operator_prompt = <<-MSG
      Do you want to add, substract, multiply or divide?
          1) Add
          2) Substract
          3) Multiply
          4) Divide
      MSG

      loop do
        prompt(operator_prompt)
        op = gets.chomp
        break if %w(1 2 3 4).include?(op)
        promp('Please check your option of operator!')
      end

      result = case op
              when '1'
                num1.to_i + num2.to_i
              when '2'
                num1.to_i - num2.to_i
              when '3'
                num1.to_i * num2.to_i
              when '4'
                num1.to_f / num2.to_f
              end

      prompt("#{op_print(op)} the two numbers...")
      prompt("The result is #{result}!!")
      prompt('Do you want to continue?(Y to continue calculating)')
      answer = gets.chomp
      break unless answer.downcase.start_with?('y')
      prompt('Let\'s keep going!')   
    end

    prompt("Goodbye! My Love #{name}!")

Debugging
  - Dealing with feeling of frustration is the first critical aspect of learning to program
  - Reading Error Messages
    1. stack trace is critical in helping you firgure out where to start debugging.
    2. Every language andd library has a certain pattern to their stack trace, so that the longer you work with a language or library, the easier it will become.
  - Online Resources
    1. Search Engine (remember to add 'Ruby' keyword)
    2. Stack Overflow (a rich treasure trove of answers to common problems)
    3. Documentation
  - Steps to Debugging
    1. Reproduce the Error
    2. Determine the Boundaries of the Error
    3. Trace the Code
      - trapping the error means know the bug originating in the code from the error message
    4. Understand the Problem Well
      - check step by step for problematic code
    5. Implement a Fix
      - use rescue to bypass or suppress the possible error to implement a Fix
      - One very important note is to fix one problem at a time
    6. Test the Fix
  - Techniques for Debugging
    1. Line by line
      - Patience and temperament first
      - reading code line-by-line, word-by-word, character-by-character
    2. Rubber Duck
    3. Walking Away
    4. Using Pry
      - Pry is a powerful Rubu REPL that can replace IRB
      - Use Pry by require "pry" and then insert binding.pry anywhere in the code and when Ruby gets to that line, execution will stop and we'll be able to inspect the state of our program at that point.
      - Ctrl + D will continue execution of the program
      - exit-program is to exit the program directly
    5. Using a Debugger
  
Order of Precedence
  - The order in which operators are evaluated called the order of precedence
  - just like 3 + 5 * 7, * is higher level of precedence than + so execute 5 * 7 first
  - another example
    array = [1, 2, 3]
    p array.map {|num| num + 1} # => [2, 3, 4]  #block has higher order of precedence
    #If use do...end, the order of precedence is lower
    p array.map do |num|
      puts num           # outputs #<Enumerator: [1, 2, 3]:map>
    end                  # => #<Enumerator: [1, 2, 3]:map>
  - Two main takeaways here
    1. Ruby evaluates expressions based on the level of precedence of the operators
    2. To override the default, use parentheses
  - Ruby's tap method
    1. for validating
    2. a debugging tool
    3. object instance method
    4. “tap into” a method chain to perform operations on intermediate results within the chain
      - example 1
        (1..10)                 .tap { |x| p x }   # 1..10
         .to_a                  .tap { |x| p x }   # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
         .select {|x| x.even? } .tap { |x| p x }   # [2, 4, 6, 8, 10]
         .map {|x| x*x }        .tap { |x| p x }   # [4, 16, 36, 64, 100]
      - example 2
          (1..10)                .tap {|x| puts "original: #{x.inspect}"}   # original: 1..10
            .to_a                .tap {|x| puts "array: #{x.inspect}"}      # array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            .select {|x| x%2==0} .tap {|x| puts "evens: #{x.inspect}"}      # evens: [2, 4, 6, 8, 10]
            .map {|x| x*x}       .tap {|x| puts "squares: #{x.inspect}"}    # [4, 16, 36, 64, 100]

Assignment: Calculator Bonus Features
  1. Better integer validation
    Option 1
      def interger?(input)
        input.to_i.to_s == input
      end
    Option 2: use regex
      def integer?(input)
        /^\d+$/.match(input)
      end
    Option 3: use built-in conversion method
      def integer?(input)
        Integer(input) rescue false
      end
  2. Number validation
    def number?(input)
      integer?(input) || float?(input)
    end
    - inplement float? method
      Option 1
        def float?(input) #if string = '1.', to_f will conver it to 1.0 which does not match "1."
          input.to_f.to_s == input
        end
      Option 2: use regex
        def float?(input)
          /\d/.match(input) && /^\d*\.?\d*$/.match(input)
        end
      Option 3: use the Kernel#Float
        def float?(input)
          Float(input) rescue false
        end
  3. operator_to_message(op_print in my solution)
    - if we wanted to add code after the case statement, we would need to save the return value of the case into a variable
    - make sure to return that variable, or that variable must be the last line in the method
      def opertion_to_message(operation)
        word = case operation
                 when '1'
                   'Adding'
                 when '2'
                   'Substracting'
                 when '3'
                   'Multiplying'
                 when '4'
                   'Dividing'
               end
        x = "A radom line of code"

        word
      end
  4. Extracting messages in the program to a configuration file
    - create YAML file first(test_message.yml)
      welcome: "Welcome to Calculator! Enter your name:"
      valid_name: "Make sure to enter a valid name."
    - load YAML file(test.rb)
      def prompt(string)
        puts "=> #{string}"
      end

      require 'yaml'
      MESSAGE = YAML.load_file('test_message.yml')
      # => {"welcome"=>"Welcome to Calculator! Enter your name:", "valid_name"=>"Make sure to enter a valid name."}
      puts MESSAGE.inspect # it is a hash expression in Ruby
      prompt(MESSAGE['welcome'])
      # => Welcome to Calculator! Enter your name:
  5. Internationalize the messages
    - modify YAML file
      en:
        welcome: "Welcome to Calculator! Enter your name:"
        valid_name: "Make sure to enter a valid name."
      es:
        welcome: "Bienvenido a la calculadora! Entre su nombre:"
        valid_name: "Asegúrese de entrar un nombre válido."
    - refactoring the message
      require 'yaml'
      MESSAGE = YAML.load_file('test_message.yml') 
      # => {"en"=>{"welcome"=>"Welcome to Calculator! Enter your name:", "valid_name"=>"Make sure to enter a valid name."}, "es"=>{"welcome"=>"Bienvenido a la calculadora! Entre su nombre:", "valid_name"=>"Asegúrese de entrar un nombre válido."}}

      LANGUAGE = 'en'

      def messages(message, lang = 'en')
        MESSAGE[lang][message]
      end

      def prompt(string)
        message = messages(string, LANGUAGE)
        Kernel.puts("=> #{message}")
      end

      prompt('welcome')

      def prompt_es(key)
        message = messages(key, 'es')
        puts "=> #{message}"
      end

      prompt_es('welcome')

